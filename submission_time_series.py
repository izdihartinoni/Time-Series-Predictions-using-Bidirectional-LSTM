# -*- coding: utf-8 -*-
"""Submission-Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JHWvhMeAjGCeGEy98ztHJVn3cS57MGgf

**Izdiharti Noni Pertiwi** 

> dataset : delhi weather data

> Sumber kaggle : https://www.kaggle.com/mahirkukreja/delhi-weather-datata
"""

from google.colab import drive
drive.mount('/content/gdrive')

#dataframe
import pandas as pd
import numpy as np
#split data
from sklearn.model_selection import train_test_split
#preprocessing dan layer
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense,Bidirectional,Dropout
#visualisasi plot
import matplotlib.pyplot as plt

df = pd.read_csv("/content/drive/MyDrive/Submission-ml-pengembangan/Delhi-weather-data.csv")
df.head(5)

#total data
df.shape

#data info
df.info()

#null check
df.isnull().sum()

df['datetime_utc']=pd.to_datetime(df['datetime_utc'])
df['datetime_utc'].head()
df[' _tempm'].fillna(df[' _tempm'].mean(), inplace=True) # we will fill the null row
df = df[['datetime_utc',' _tempm' ]]
df.head()

df.info()

delhi=df[['datetime_utc',' _tempm']].copy()
delhi['just_date'] = delhi['datetime_utc'].dt.date

DF=delhi.drop('datetime_utc',axis=1)
DF.set_index('just_date', inplace= True)
DF.head()

DF.info()

date = df['datetime_utc'].values
temp = df[' _tempm'].values

plt.figure(figsize=(20,8))
plt.plot(DF)
plt.title('Delhi Weather')
plt.xlabel('Date')
plt.ylabel('temperature')
plt.show()

#Split Dataset
x_train, x_test, y_train, y_test = train_test_split(temp, date, test_size = 0.2, random_state = 0 , shuffle=False)

#Total data train (80%) dan validation (20%)
print('Total Data Train : ',len(x_train))
print('Total Data Validation : ',len(x_test))

#Merubah data u/ dapat diterima model
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder = True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

#Pemodelan Sequential

data_x_train = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
data_x_test = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=1000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

#Menghitung nilai 10% MAE u/ penerapan callback"""

x = (df[' _tempm'].max() - df[' _tempm'].min()) * 10/100
print(x)

#Penggunaan Callback <10% MAE

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<x and logs.get('val_mae')<x):
      print("\nMAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

#Penggunaan learning rate SGD untuk optimizer
tf.keras.backend.set_floatx('float64')
optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(data_x_train ,epochs=500, validation_data=data_x_test, callbacks=[callbacks])

# plot of mae
import matplotlib.pyplot as plt
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# plot of loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()